"use strict";

var _tap = require("tap");

var tap = _interopRequireWildcard(_tap);

var _cache = require("../src/cache.es5");

var _cache2 = _interopRequireDefault(_cache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function work(...args) {
	return args.reduce((a, b) => a + Math.random() * b, Math.random());
}
function workWithObject(obj) {
	return work.apply(null, Object.values(obj));
}

tap.test("simple caching", t => {
	t.plan(2);

	const memWork = (0, _cache2.default)(work);
	let a = memWork(1);
	let b = memWork(1);

	t.equal(a, b, "a === b should be true (cached)");
	memWork.flush(); // clears the cache
	b = memWork(1);
	t.notEqual(a, b, "a === b should be false");
});

tap.test("dyadic caching", t => {
	t.plan(3);

	const memWork = (0, _cache2.default)(work);
	let a = memWork(2, 4);
	let b = memWork(2, 4);

	t.equal(a, b, "a === b should be true (cached)");

	b = memWork(2, 4.2);
	t.notEqual(a, b, "a === b should be false");

	memWork.flush(); // clears the cache
	b = memWork(2, 4);
	t.notEqual(a, b, "a === b should be false");
});

tap.test("triadic caching", t => {
	t.plan(3);

	const memWork = (0, _cache2.default)(work);
	let a = memWork(5, 7, 2);
	let b = memWork(5, 7, 2);

	t.equal(a, b, "a === b should be true (cached)");

	b = memWork(1, 4.2, 41);
	t.notEqual(a, b, "a === b should be false");

	memWork.flush(); // clears the cache
	b = memWork(1, 4.2, 41);
	t.notEqual(a, b, "a === b should be false");
});

tap.test("object caching", t => {
	t.plan(4);

	const memWork = (0, _cache2.default)(workWithObject);
	let a = memWork({ a: 1 });
	let b = memWork({ a: 1 });

	t.equal(a, b, "a === b should be true (cached)");

	b = memWork({ b: 1 });
	t.notEqual(a, b, "a === b should be false");

	memWork.flush(); // clears the cache
	b = memWork({ a: 1 });
	t.notEqual(a, b, "a === b should be false");

	memWork.flush(); // clears the cache
	a = memWork({ a: 3, b: 2, c: 5, d: -1 });
	b = memWork({ a: 3, b: 2, c: 5, d: -1 });
	t.equal(a, b, "a === b should be true (cached)");
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQVgsRUFBYyxpQ0FBZDs7QUFFQSxLQUFJLFFBQVEsRUFBQyxHQUFFLENBQUgsRUFBUixDQUFKO0FBQ0EsR0FBRSxRQUFGLENBQVcsQ0FBWCxFQUFjLENBQWQsRUFBaUIseUJBQWpCOztBQUVBLFNBQVEsS0FBUixHQVppQyxDQVlqQjtBQUNoQixLQUFJLFFBQVEsRUFBQyxHQUFFLENBQUgsRUFBUixDQUFKO0FBQ0EsR0FBRSxRQUFGLENBQVcsQ0FBWCxFQUFjLENBQWQsRUFBaUIseUJBQWpCOztBQUVBLFNBQVEsS0FBUixHQWhCaUMsQ0FnQmpCO0FBQ2hCLEtBQUksUUFBUSxFQUFDLEdBQUUsQ0FBSCxFQUFLLEdBQUUsQ0FBUCxFQUFTLEdBQUUsQ0FBWCxFQUFhLEdBQUUsQ0FBQyxDQUFoQixFQUFSLENBQUo7QUFDQSxLQUFJLFFBQVEsRUFBQyxHQUFFLENBQUgsRUFBSyxHQUFFLENBQVAsRUFBUyxHQUFFLENBQVgsRUFBYSxHQUFFLENBQUMsQ0FBaEIsRUFBUixDQUFKO0FBQ0EsR0FBRSxLQUFGLENBQVEsQ0FBUixFQUFXLENBQVgsRUFBYyxpQ0FBZDtBQUNBLENBcEJEIiwiZmlsZSI6ImNhY2hlLmVzNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiXG5cbmltcG9ydCAqIGFzIHRhcCBmcm9tIFwidGFwXCJcbmltcG9ydCBtYWtlQ2FjaGluZyBmcm9tIFwiLi4vc3JjL2NhY2hlLmVzNVwiXG5cbmZ1bmN0aW9uIHdvcmsoLi4uYXJncykgeyByZXR1cm4gYXJncy5yZWR1Y2UoKGEsYikgPT4gYSArIE1hdGgucmFuZG9tKCkqYiwgTWF0aC5yYW5kb20oKSkgfVxuZnVuY3Rpb24gd29ya1dpdGhPYmplY3Qob2JqKSB7IHJldHVybiB3b3JrLmFwcGx5KG51bGwsIE9iamVjdC52YWx1ZXMob2JqKSkgfVxuXG5cbnRhcC50ZXN0KFwic2ltcGxlIGNhY2hpbmdcIiwgKHQpID0+IHtcblx0dC5wbGFuKDIpXG5cblx0Y29uc3QgbWVtV29yayA9IG1ha2VDYWNoaW5nKHdvcmspXG5cdGxldCBhID0gbWVtV29yaygxKVxuXHRsZXQgYiA9IG1lbVdvcmsoMSlcblxuXHR0LmVxdWFsKGEsIGIsIFwiYSA9PT0gYiBzaG91bGQgYmUgdHJ1ZSAoY2FjaGVkKVwiKVxuXHRtZW1Xb3JrLmZsdXNoKCkgICAgLy8gY2xlYXJzIHRoZSBjYWNoZVxuXHRiID0gbWVtV29yaygxKVxuXHR0Lm5vdEVxdWFsKGEsIGIsIFwiYSA9PT0gYiBzaG91bGQgYmUgZmFsc2VcIilcbn0pXG5cbnRhcC50ZXN0KFwiZHlhZGljIGNhY2hpbmdcIiwgKHQpID0+IHtcblx0dC5wbGFuKDMpXG5cblx0Y29uc3QgbWVtV29yayA9IG1ha2VDYWNoaW5nKHdvcmspXG5cdGxldCBhID0gbWVtV29yaygyLCA0KVxuXHRsZXQgYiA9IG1lbVdvcmsoMiwgNClcblxuXHR0LmVxdWFsKGEsIGIsIFwiYSA9PT0gYiBzaG91bGQgYmUgdHJ1ZSAoY2FjaGVkKVwiKVxuXHRcblx0YiA9IG1lbVdvcmsoMiwgNC4yKVxuXHR0Lm5vdEVxdWFsKGEsIGIsIFwiYSA9PT0gYiBzaG91bGQgYmUgZmFsc2VcIilcblxuXHRtZW1Xb3JrLmZsdXNoKCkgICAgLy8gY2xlYXJzIHRoZSBjYWNoZVxuXHRiID0gbWVtV29yaygyLCA0KVxuXHR0Lm5vdEVxdWFsKGEsIGIsIFwiYSA9PT0gYiBzaG91bGQgYmUgZmFsc2VcIilcbn0pXG5cbnRhcC50ZXN0KFwidHJpYWRpYyBjYWNoaW5nXCIsICh0KSA9PiB7XG5cdHQucGxhbigzKVxuXG5cdGNvbnN0IG1lbVdvcmsgPSBtYWtlQ2FjaGluZyh3b3JrKVxuXHRsZXQgYSA9IG1lbVdvcmsoNSwgNywgMilcblx0bGV0IGIgPSBtZW1Xb3JrKDUsIDcsIDIpXG5cblx0dC5lcXVhbChhLCBiLCBcImEgPT09IGIgc2hvdWxkIGJlIHRydWUgKGNhY2hlZClcIilcblx0XG5cdGIgPSBtZW1Xb3JrKDEsIDQuMiwgNDEpXG5cdHQubm90RXF1YWwoYSwgYiwgXCJhID09PSBiIHNob3VsZCBiZSBmYWxzZVwiKVxuXG5cdG1lbVdvcmsuZmx1c2goKSAgICAvLyBjbGVhcnMgdGhlIGNhY2hlXG5cdGIgPSBtZW1Xb3JrKDEsIDQuMiwgNDEpXG5cdHQubm90RXF1YWwoYSwgYiwgXCJhID09PSBiIHNob3VsZCBiZSBmYWxzZVwiKVxufSlcblxudGFwLnRlc3QoXCJvYmplY3QgY2FjaGluZ1wiLCAodCkgPT4ge1xuXHR0LnBsYW4oNClcblxuXHRjb25zdCBtZW1Xb3JrID0gbWFrZUNhY2hpbmcod29ya1dpdGhPYmplY3QpXG5cdGxldCBhID0gbWVtV29yayh7YToxfSlcblx0bGV0IGIgPSBtZW1Xb3JrKHthOjF9KVxuXG5cdHQuZXF1YWwoYSwgYiwgXCJhID09PSBiIHNob3VsZCBiZSB0cnVlIChjYWNoZWQpXCIpXG5cdFxuXHRiID0gbWVtV29yayh7YjoxfSlcblx0dC5ub3RFcXVhbChhLCBiLCBcImEgPT09IGIgc2hvdWxkIGJlIGZhbHNlXCIpXG5cblx0bWVtV29yay5mbHVzaCgpXHQvLyBjbGVhcnMgdGhlIGNhY2hlXG5cdGIgPSBtZW1Xb3JrKHthOjF9KVxuXHR0Lm5vdEVxdWFsKGEsIGIsIFwiYSA9PT0gYiBzaG91bGQgYmUgZmFsc2VcIilcblxuXHRtZW1Xb3JrLmZsdXNoKClcdC8vIGNsZWFycyB0aGUgY2FjaGVcblx0YSA9IG1lbVdvcmsoe2E6MyxiOjIsYzo1LGQ6LTF9KVxuXHRiID0gbWVtV29yayh7YTozLGI6MixjOjUsZDotMX0pXG5cdHQuZXF1YWwoYSwgYiwgXCJhID09PSBiIHNob3VsZCBiZSB0cnVlIChjYWNoZWQpXCIpXG59KVxuXG4iXX0=