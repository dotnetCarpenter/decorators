"use strict";

var _tap = require("tap");

var tap = _interopRequireWildcard(_tap);

var _cache = require("../src/cache.es5");

var _cache2 = _interopRequireDefault(_cache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function work(...args) {
	return args.reduce((a, b) => a + Math.random() * b, Math.random());
}
function workWithObject(obj) {
	return work.apply(null, Object.values(obj));
}

tap.test("simple caching", t => {
	t.plan(2);

	const memWork = (0, _cache2.default)(work);
	let a = memWork(1);
	let b = memWork(1);

	t.equal(a, b, "a === b should be true (cached)");

	memWork.flush(); // clears the cache
	b = memWork(1);
	t.notEqual(a, b, "a === b should be false");
});

tap.test("dyadic caching", t => {
	t.plan(3);

	const memWork = (0, _cache2.default)(work);
	let a = memWork(2, 4);
	let b = memWork(2, 4);

	t.equal(a, b, "a === b should be true (cached)");

	b = memWork(2, 4.2);
	t.notEqual(a, b, "a === b should be false");

	memWork.flush(); // clears the cache
	b = memWork(2, 4);
	t.notEqual(a, b, "a === b should be false");
});

tap.test("triadic caching", t => {
	t.plan(3);

	const memWork = (0, _cache2.default)(work);
	let a = memWork(5, 7, 2);
	let b = memWork(5, 7, 2);

	t.equal(a, b, "a === b should be true (cached)");

	b = memWork(1, 4.2, 41);
	t.notEqual(a, b, "a === b should be false");

	memWork.flush(); // clears the cache
	b = memWork(1, 4.2, 41);
	t.notEqual(a, b, "a === b should be false");
});

tap.test("object caching", t => {
	t.plan(5);

	const memWork = (0, _cache2.default)(workWithObject);
	let a = memWork({ a: 1 });
	let b = memWork({ a: 1 });

	t.equal(a, b, "a === b should be true (cached)");

	b = memWork({ b: 1 });
	t.notEqual(a, b, "a === b should be false");

	memWork.flush(); // clears the cache
	b = memWork({ a: 1 });
	t.notEqual(a, b, "a === b should be false");

	memWork.flush(); // clears the cache
	a = memWork({ a: 3, b: 2, c: 5, d: -1 });
	b = memWork({ a: 3, b: 2, c: 5, d: -1 });
	t.equal(a, b, "a === b should be true (cached)");

	memWork.flush(); // clears the cache
	a = memWork({ a: 3, b: 2, c: 5, d: -1 });
	b = memWork({ a: 3, b: 2, c: 5, d: 100 });
	t.notEqual(a, b, "a === b should be false)");
});

tap.test("array caching", t => {
	t.plan(3);

	let memWork = (0, _cache2.default)(work);
	let a = memWork.apply(null, [1, 2, 3]);
	let b = memWork.apply(null, [1, 2, 3]);

	t.equal(a, b, "a === b should be true (cached)");

	memWork.flush(); // clears the cache
	b = memWork.apply(null, [1, 2, 3]);
	t.notEqual(a, b, "a === b should be false");

	/** context can NOT be used to transform input **/
	memWork = (0, _cache2.default)(work, work);
	a = memWork([1, 2, 3]);
	b = memWork([1, 2, 3]);

	t.notEqual(a, b, "a === b should be false - NaN - context can NOT be used to transform input )");
});

tap.test("context caching (prototype/object)", t => {
	t.plan(6);

	function MyClass() {
		this.work = work;
	}
	MyClass.prototype.execute = function (values) {
		return this.work(values);
	};

	class MyClassSuger {
		constructor() {
			this.work = work;
		}
		execute(values) {
			return this.work(values);
		}
	}

	const myObject = {
		work,
		execute(values) {
			return this.work(values);
		}
	};

	/** prototypal context **/
	const myClass = new MyClass();
	let memWork = (0, _cache2.default)(myClass.execute, myClass);
	let a = memWork(1);
	let b = memWork(1);

	t.equal(a, b, "a === b should be true (cached)");

	memWork.flush(); // clears the cache
	b = memWork(1);
	t.notEqual(a, b, "a === b should be false");

	/** class prototypal context **/
	const myClassSugar = new MyClassSuger();
	memWork = (0, _cache2.default)(myClassSugar.execute, myClassSugar);
	a = memWork(1);
	b = memWork(1);

	t.equal(a, b, "a === b should be true (cached)");

	memWork.flush(); // clears the cache
	b = memWork(1);
	t.notEqual(a, b, "a === b should be false");

	/** object context **/
	memWork = (0, _cache2.default)(myObject.execute, myObject);
	a = memWork(1);
	b = memWork(1);

	t.equal(a, b, "a === b should be true (cached)");
	memWork.flush(); // clears the cache

	b = memWork(1);
	t.notEqual(a, b, "a === b should be false");
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,