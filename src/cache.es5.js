/*
Create a function makeCaching(f) which takes a one-argument function f(arg),
and makes a wrapper over it which caches calls.
The wrapper should have a static flush() method to flush the cache.
Function f is allowed to have only one argument.
Since we have the spread operator we accept multiple arguments
as an array - hence it's still a single argument.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function makeCaching(f, context) {
  const cache = new Map();
  decorator.flush = cache.clear.bind(cache);

  function decorator(...args) {
    const key = JSON.stringify(args);
    return cache.has(key) ? cache.get(key) : cache.set(key, context ? f.call(context, ...args) : f(...args)) // context switching is expensive so we only do it if necessary
    .get(key);
  }

  return decorator;
} // No modifications of work are allowed. Your code should reside only in makeCaching.


var _default = makeCaching;
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhY2hlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUVBLFNBQVMsV0FBVCxDQUFxQixDQUFyQixFQUF3QixPQUF4QixFQUFpQztBQUNoQyxRQUFNLEtBQUssR0FBRyxJQUFJLEdBQUosRUFBZDtBQUVBLEVBQUEsU0FBUyxDQUFDLEtBQVYsR0FBa0IsS0FBSyxDQUFDLEtBQU4sQ0FBWSxJQUFaLENBQWlCLEtBQWpCLENBQWxCOztBQUVBLFdBQVMsU0FBVCxDQUFtQixHQUFHLElBQXRCLEVBQTRCO0FBQzNCLFVBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBZixDQUFaO0FBQ0EsV0FBTyxLQUFLLENBQUMsR0FBTixDQUFVLEdBQVYsSUFDTixLQUFLLENBQUMsR0FBTixDQUFVLEdBQVYsQ0FETSxHQUVMLEtBQUssQ0FBQyxHQUFOLENBQVUsR0FBVixFQUFlLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBRixDQUFPLE9BQVAsRUFBZ0IsR0FBRyxJQUFuQixDQUFILEdBQThCLENBQUMsQ0FBQyxHQUFHLElBQUosQ0FBckQsRUFBZ0U7QUFBaEUsS0FDRSxHQURGLENBQ00sR0FETixDQUZGO0FBSUE7O0FBQ0QsU0FBTyxTQUFQO0FBQ0EsQyxDQUNEOzs7ZUFFZSxXIiwiZmlsZSI6ImNhY2hlLmVzNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5DcmVhdGUgYSBmdW5jdGlvbiBtYWtlQ2FjaGluZyhmKSB3aGljaCB0YWtlcyBhIG9uZS1hcmd1bWVudCBmdW5jdGlvbiBmKGFyZyksXG5hbmQgbWFrZXMgYSB3cmFwcGVyIG92ZXIgaXQgd2hpY2ggY2FjaGVzIGNhbGxzLlxuVGhlIHdyYXBwZXIgc2hvdWxkIGhhdmUgYSBzdGF0aWMgZmx1c2goKSBtZXRob2QgdG8gZmx1c2ggdGhlIGNhY2hlLlxuRnVuY3Rpb24gZiBpcyBhbGxvd2VkIHRvIGhhdmUgb25seSBvbmUgYXJndW1lbnQuXG5TaW5jZSB3ZSBoYXZlIHRoZSBzcHJlYWQgb3BlcmF0b3Igd2UgYWNjZXB0IG11bHRpcGxlIGFyZ3VtZW50c1xuYXMgYW4gYXJyYXkgLSBoZW5jZSBpdCdzIHN0aWxsIGEgc2luZ2xlIGFyZ3VtZW50LlxuKi9cblwidXNlIHN0cmljdFwiXG5cbmZ1bmN0aW9uIG1ha2VDYWNoaW5nKGYsIGNvbnRleHQpIHtcblx0Y29uc3QgY2FjaGUgPSBuZXcgTWFwKClcblxuXHRkZWNvcmF0b3IuZmx1c2ggPSBjYWNoZS5jbGVhci5iaW5kKGNhY2hlKVxuXG5cdGZ1bmN0aW9uIGRlY29yYXRvciguLi5hcmdzKSB7XG5cdFx0Y29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkoYXJncylcblx0XHRyZXR1cm4gY2FjaGUuaGFzKGtleSkgP1xuXHRcdFx0Y2FjaGUuZ2V0KGtleSkgOlxuXHRcdFx0XHRjYWNoZS5zZXQoa2V5LCBjb250ZXh0ID8gZi5jYWxsKGNvbnRleHQsIC4uLmFyZ3MpIDogZiguLi5hcmdzKSlcdC8vIGNvbnRleHQgc3dpdGNoaW5nIGlzIGV4cGVuc2l2ZSBzbyB3ZSBvbmx5IGRvIGl0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdC5nZXQoa2V5KVxuXHR9XG5cdHJldHVybiBkZWNvcmF0b3Jcbn1cbi8vIE5vIG1vZGlmaWNhdGlvbnMgb2Ygd29yayBhcmUgYWxsb3dlZC4gWW91ciBjb2RlIHNob3VsZCByZXNpZGUgb25seSBpbiBtYWtlQ2FjaGluZy5cblxuZXhwb3J0IGRlZmF1bHQgbWFrZUNhY2hpbmdcbiJdfQ==